{"version":3,"sources":["Question.js","App.js","index.js"],"names":["Question","props","useState","whatBody","setBody","className","onClick","updateFn","clue","answer","App","getQuestionsForTopic","topic","questions","i","questionData","length","question","key","push","price","showSingleClue","myClue","myAnswer","setBoard","setClue","setAnswer","showBoard","text","onClickValue","historyQuestions","sportsQuestions","techQuestions","boardClassName","isBoard","topicMap","setPrices","ReactDOM","render","document","getElementById"],"mappings":"81CAGe,SAASA,EAASC,GAAO,MASRC,mBAASD,EAAK,OATN,mBAS7BE,EAT6B,KASnBC,EATmB,KAUpC,OAAO,yBAAKC,UAAU,MAAMC,QAT5B,WACqB,KAAbH,IAGJF,EAAMM,SAASN,EAAMO,KAAMP,EAAMQ,QACjCL,EAAQ,OAIL,IAA4CD,EAA5C,K,WCkFIO,MAzFf,WAcI,SAASC,EAAqBC,GAE1B,IADA,IAAIC,EAAY,GACPC,EAAI,EAAGA,EAAIC,EAAY,UAAcC,OAAQF,IAAK,CACvD,IAAIG,EAAWF,EAAY,UAAcD,GACzC,GAAIG,EAAQ,QAAcL,EAAO,CAC7B,IAAIM,EAAMN,EAAQE,EAClBD,EAAUM,KAAK,kBAACnB,EAAD,CAAUQ,KAAMS,EAAST,KACfC,OAAQQ,EAASR,OAAQS,IAAKA,EAC9BE,MAAOH,EAASG,MAChBb,SAAUc,MAG3C,OAAOR,EAGX,SAASQ,EAAeC,EAAQC,GAC5BC,EAAS,YACTC,EAAQH,GACRI,EAAUH,GAGd,SAASI,EAAUC,EAAMC,GAKrB,IAAIC,EAAmBnB,EAAqB,WACxCoB,EAAkBpB,EAAqB,UACvCqB,EAAgBrB,EAAqB,QAErCsB,EAAiB,QAKrB,MAJgB,cAAZC,IACAD,GAAkB,WAIlB,yBAAK5B,UAAU,OACX,0CACA,yBAAKA,UAAW4B,GAEZ,yBAAK5B,UAAU,UACVyB,GAGL,yBAAKzB,UAAU,UACV0B,GAGL,yBAAK1B,UAAU,UACV2B,IAGT,wBAAI3B,UAAU,OAAOC,QA9B7B,WACIkB,EAASK,KA6BL,IAA8CD,EAA9C,MAlED,MAwEiB1B,mBAAS,aAxE1B,mBAwEJgC,EAxEI,KAwEKV,EAxEL,OAyEetB,mBAAS,IAzExB,mBAyEJoB,EAzEI,KAyEIG,EAzEJ,OA0EmBvB,mBAAS,IA1E5B,mBA0EJqB,EA1EI,KA0EMG,EA1EN,KA8EX,OA7EA,WAEI,IADA,IAAIS,EAAW,GACNrB,EAAI,EAAGA,EAAIC,EAAY,UAAcC,OAAQF,IAAK,CACvD,IAAIG,EAAWF,EAAY,UAAcD,GACrCF,EAAQK,EAAQ,MACdL,KAASuB,IACXA,EAASvB,GAAS,KAEtBK,EAAQ,MAAYkB,EAASvB,GAC7BuB,EAASvB,IAAU,KAiE3BwB,GAGgB,cAAZF,EACOP,EAAU,GAAI,IAET,aAAZO,EACOP,EAAUL,EAAQ,cAEb,eAAZY,EACOP,EAAUJ,EAAU,kBAD/B,GCtFJc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.857fa5df.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nexport default function Question(props) {\n    function showAnswer() {\n        if (whatBody === \"\") {\n            return;\n        }\n        props.updateFn(props.clue, props.answer);\n        setBody(\"\");\n    }\n\n    const [whatBody, setBody] = useState(props[\"price\"]);\n    return <div className='box' onClick={showAnswer}> {whatBody} </div>;\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport Question from \"./Question\";\nimport questionData from './question-data.json';\n\n\nfunction App() {\n    function setPrices() {\n        let topicMap = {}\n        for (let i = 0; i < questionData['questions'].length; i++) {\n            let question = questionData['questions'][i];\n            let topic = question['topic'];\n            if (!(topic in topicMap)) {\n                topicMap[topic] = 100;\n            }\n            question['price'] = topicMap[topic];\n            topicMap[topic] += 100;\n        }\n    }\n\n    function getQuestionsForTopic(topic) {\n        let questions = [];\n        for (let i = 0; i < questionData['questions'].length; i++) {\n            let question = questionData['questions'][i];\n            if (question['topic'] === topic) {\n                let key = topic + i;\n                questions.push(<Question clue={question.clue}\n                                         answer={question.answer} key={key}\n                                         price={question.price}\n                                         updateFn={showSingleClue}/>);\n            }\n        }\n        return questions;\n    }\n\n    function showSingleClue(myClue, myAnswer) {\n        setBoard('showClue');\n        setClue(myClue);\n        setAnswer(myAnswer);\n    }\n\n    function showBoard(text, onClickValue) {\n        function toggleAnswer() {\n            setBoard(onClickValue);\n        }\n\n        let historyQuestions = getQuestionsForTopic(\"history\");\n        let sportsQuestions = getQuestionsForTopic(\"sports\");\n        let techQuestions = getQuestionsForTopic(\"tech\");\n\n        let boardClassName = \"board\";\n        if (isBoard !== \"showBoard\") {\n            boardClassName += \" hidden\";\n        }\n\n        return (\n            <div className=\"App\">\n                <h1> Jeopardy </h1>\n                <div className={boardClassName}>\n                    {/* Column - 1 (HISTORY) */}\n                    <div className=\"column\">\n                        {historyQuestions}\n                    </div>\n                    {/* Column - 2 (SPORTS) */}\n                    <div className=\"column\">\n                        {sportsQuestions}\n                    </div>\n                    {/* Column - 3 (TECH) */}\n                    <div className=\"column\">\n                        {techQuestions}\n                    </div>\n                </div>\n                <h1 className=\"clue\" onClick={toggleAnswer}> {text} </h1>\n            </div>\n        );\n    }\n\n\n    const [isBoard, setBoard] = useState('showBoard');\n    const [myClue, setClue] = useState('');\n    const [myAnswer, setAnswer] = useState('');\n    setPrices();\n\n\n    if (isBoard === 'showBoard') {\n        return showBoard(\"\", \"\");\n    }\n    if (isBoard === 'showClue') {\n        return showBoard(myClue, 'showAnswer');\n    }\n    if (isBoard === 'showAnswer') {\n        return showBoard(myAnswer, 'showBoard');\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}